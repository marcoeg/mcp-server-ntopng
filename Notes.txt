ntopng token for marcoeg-nod004.ntoplink.com
397ee4a3bcb03f25e3535214cba37834


Thank you! I’ll expand the code to include all available methods for the **Hosts**, **Alerts**, and **Flows** sections from the RESTful API v2 Specification provided in the document. I’ll ensure each function:

1. Uses the `NTOPNG_HOST` environment variable for the `BASE_URL`.
2. Excludes Users API methods (already handled).
3. Includes the `@mcp.tool` decorator with a meaningful `name` and `description`.
4. Mirrors the parameters and HTTP method (GET or POST) as specified in the API documentation.

Below is the complete Python code for all methods in the **Hosts**, **Alerts**, and **Flows** sections.

### Python Code for Hosts, Alerts, and Flows

```python
import os
import requests
from typing import Dict, Any

# Retrieve the ntopng host from an environment variable
NTOPNG_HOST = os.getenv("NTOPNG_HOST")
if not NTOPNG_HOST:
    raise ValueError("NTOPNG_HOST environment variable not set")
BASE_URL = f"https://{NTOPNG_HOST}"

# Retrieve the API key from an environment variable
NTOPNG_API_KEY = os.getenv("NTOPNG_API_KEY")
if not NTOPNG_API_KEY:
    raise ValueError("NTOPNG_API_KEY environment variable not set")

# Headers for authentication
HEADERS = {
    "Authorization": f"Token {NTOPNG_API_KEY}",
    "Content-Type": "application/json"
}

# Mock mcp.tool decorator (adjust if your actual mcp module differs)
class mcp:
    @staticmethod
    def tool(name: str, description: str):
        def decorator(func):
            func.tool_name = name
            func.tool_description = description
            return func
        return decorator

# --- Hosts Section ---
@mcp.tool(name="get ntopng hosts location", description="Fetch geographical location and additional info for hosts.")
def get_hosts_location(ifid: int) -> Dict[str, Any]:
    """
    Fetch the location and additional information of hosts.

    Args:
        ifid (int): Interface identifier.

    Returns:
        Dict[str, Any]: JSON response with host location data.

    Raises:
        requests.RequestException: If the API request encounters an error.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/geo_map/hosts.lua"
    params = {"ifid": ifid}
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="fetch ntopng top local talkers", description="Retrieve the top 10 local talkers for a specified interface.")
def get_top_local_talkers(ifid: int) -> Dict[str, Any]:
    """
    Get the top 10 local talkers for a specified interface.

    Args:
        ifid (int): Interface ID.

    Returns:
        Dict[str, Any]: JSON response with top local talkers data.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/interface/top/local/talkers.lua"
    params = {"ifid": ifid}
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="fetch ntopng top remote talkers", description="Retrieve the top 10 remote talkers for a specified interface.")
def get_top_remote_talkers(ifid: int) -> Dict[str, Any]:
    """
    Get the top 10 remote talkers for a specified interface.

    Args:
        ifid (int): Interface ID.

    Returns:
        Dict[str, Any]: JSON response with top remote talkers data.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/interface/top/remote/talkers.lua"
    params = {"ifid": ifid}
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="get ntopng top timeseries stats", description="Retrieve top timeseries statistics for an interface.")
def get_top_ts_stats(ifid: int, epoch_begin: int, epoch_end: int, ts_query: str, detail_view: str) -> Dict[str, Any]:
    """
    Get the top timeseries statistics.

    Args:
        ifid (int): Interface identifier.
        epoch_begin (int): Start time (epoch).
        epoch_end (int): End time (epoch).
        ts_query (str): Data used to get timeseries (e.g., 'ifid:1,protocol:DNS').
        detail_view (str): Top information requested (e.g., 'top_protocols', 'top_categories').

    Returns:
        Dict[str, Any]: JSON response with timeseries stats.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/interface/top_ts_stats.lua"
    params = {
        "ifid": ifid,
        "epoch_begin": epoch_begin,
        "epoch_end": epoch_end,
        "ts_query": ts_query,
        "detail_view": detail_view
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="add ntopng host to scan", description="Add a host to the ntopng vulnerability scan list.")
def add_host_to_scan(host: str, scan_type: str, scan_ports: str, scan_frequency: str, scan_id: str, cidr: str) -> Dict[str, Any]:
    """
    Add a host to the vulnerability scan list.

    Args:
        host (str): Host address.
        scan_type (str): Vulnerability scan type.
        scan_ports (str): Comma-separated list of ports.
        scan_frequency (str): Scan frequency (e.g., 'disabled', '1day', '1week').
        scan_id (str): Scan ID.
        cidr (str): Network CIDR.

    Returns:
        Dict[str, Any]: JSON response indicating success or failure.

    Raises:
        requests.RequestException: If the POST request fails.
    """
    url = f"{BASE_URL}/lua/rest/v2/add/host/to_scan.lua"
    data = {
        "host": host,
        "scan_type": scan_type,
        "scan_ports": scan_ports,
        "scan_frequency": scan_frequency,
        "scan_id": scan_id,
        "cidr": cidr
    }
    response = requests.post(url, headers=HEADERS, json=data, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="schedule ntopng host vulnerability scan", description="Schedule or delete a host from the vulnerability scan list.")
def schedule_vulnerability_scan(host: str, scan_type: str, scan_ports: str, scan_single_host: bool) -> Dict[str, Any]:
    """
    Schedule or delete a host from the vulnerability scan list.

    Args:
        host (str): Host address.
        scan_type (str): Vulnerability scan type.
        scan_ports (str): Comma-separated list of ports.
        scan_single_host (bool): Boolean to scan a single host or all.

    Returns:
        Dict[str, Any]: JSON response indicating success or failure.

    Raises:
        requests.RequestException: If the POST request fails.
    """
    url = f"{BASE_URL}/lua/rest/v2/exec/host/schedule_vulnerability_scan.lua"
    data = {
        "host": host,
        "scan_type": scan_type,
        "scan_ports": scan_ports,
        "scan_single_host": scan_single_host
    }
    response = requests.post(url, headers=HEADERS, json=data, verify=True)
    response.raise_for_status()
    return response.json()

# --- Alerts Section ---
@mcp.tool(name="acknowledge ntopng snmp alerts", description="Acknowledge historical SNMP device alerts in ntopng.")
def acknowledge_snmp_device_alerts(ifid: int, label: str, alert_id: str, row_id: int, epoch_begin: int, epoch_end: int, 
                                   severity: str, score: str, ip: str, snmp_interface: str) -> Dict[str, Any]:
    """
    Acknowledge historical SNMP device alerts.

    Args:
        ifid (int): Interface identifier.
        label (str): Description of why the alert was acknowledged.
        alert_id (str): Alert identifier (e.g., 'id;eq').
        row_id (int): Specific alert identifier.
        epoch_begin (int): Start time in epoch format.
        epoch_end (int): End time in epoch format.
        severity (str): Severity identifier (e.g., 'id;eq').
        score (str): Score filter (e.g., 'id;eq').
        ip (str): IP address filter (e.g., 'id;eq').
        snmp_interface (str): SNMP interface identifier (e.g., 'id;eq').

    Returns:
        Dict[str, Any]: JSON response confirming acknowledgment.

    Raises:
        requests.RequestException: If the API call fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/acknowledge/snmp/device/alerts.lua"
    params = {
        "ifid": ifid,
        "label": label,
        "alert_id": alert_id,
        "row_id": row_id,
        "epoch_begin": epoch_begin,
        "epoch_end": epoch_end,
        "severity": severity,
        "score": score,
        "ip": ip,
        "snmp_interface": snmp_interface
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="add ntopng alert exclusion", description="Add an alert exclusion rule in ntopng.")
def add_alert_exclusion(type: str, alert_addr: str, alert_domain: str, alert_certificate: str, subdir: str, 
                        flow_alert_key: str, host_alert_key: str, delete_alerts: bool) -> Dict[str, Any]:
    """
    Add an alert exclusion.

    Args:
        type (str): Type of host to exclude (e.g., 'host', 'domain', 'certificate').
        alert_addr (str): Host IP to exclude.
        alert_domain (str): Domain to exclude.
        alert_certificate (str): Certificate to exclude.
        subdir (str): Type of alert to exclude ('flow' or 'host').
        flow_alert_key (str): Flow alert identifier.
        host_alert_key (str): Host alert identifier.
        delete_alerts (bool): True to delete excluded alerts, False otherwise.

    Returns:
        Dict[str, Any]: JSON response indicating success or failure.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/add/alert/exclusion.lua"
    params = {
        "type": type,
        "alert_addr": alert_addr,
        "alert_domain": alert_domain,
        "alert_certificate": alert_certificate,
        "subdir": subdir,
        "flow_alert_key": flow_alert_key,
        "host_alert_key": host_alert_key,
        "delete_alerts": delete_alerts
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="add ntopng device exclusion", description="Add a device to exclude from MAC tracking in ntopng.")
def add_device_exclusion(ifid: int, mac_list: str, trigger_alerts: bool) -> Dict[str, Any]:
    """
    Add a device to exclude from MAC tracking.

    Args:
        ifid (int): Interface identifier.
        mac_list (str): Comma-separated list of MAC addresses to exclude.
        trigger_alerts (bool): True to trigger alerts, False otherwise.

    Returns:
        Dict[str, Any]: JSON response indicating success or failure.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/add/device/exclusion.lua"
    params = {"ifid": ifid, "mac_list": mac_list, "trigger_alerts": trigger_alerts}
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="delete ntopng alert exclusion", description="Delete an alert exclusion rule in ntopng.")
def delete_alert_exclusion(type: str, alert_addr: str, alert_domain: str, alert_certificate: str, subdir: str, 
                          flow_alert_key: str, host_alert_key: str) -> Dict[str, Any]:
    """
    Delete an alert exclusion.

    Args:
        type (str): Type of host to exclude (e.g., 'host', 'domain', 'certificate').
        alert_addr (str): Host IP to exclude.
        alert_domain (str): Domain to exclude.
        alert_certificate (str): Certificate to exclude.
        subdir (str): Type of alert to exclude ('flow' or 'host').
        flow_alert_key (str): Flow alert identifier.
        host_alert_key (str): Host alert identifier.

    Returns:
        Dict[str, Any]: JSON response indicating success or failure.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/delete/alert/exclusion.lua"
    params = {
        "type": type,
        "alert_addr": alert_addr,
        "alert_domain": alert_domain,
        "alert_certificate": alert_certificate,
        "subdir": subdir,
        "flow_alert_key": flow_alert_key,
        "host_alert_key": host_alert_key
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="delete ntopng all alert exclusions", description="Delete all configured host or flow alert exclusions for a host.")
def delete_all_alert_exclusions(type: str, host: str) -> Dict[str, Any]:
    """
    Delete all configured host or flow alert exclusions for a specific host.

    Args:
        type (str): Either 'host' or 'flow'.
        host (str): The IP address of the host.

    Returns:
        Dict[str, Any]: JSON response indicating success or failure.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/delete/all/alert/exclusions.lua"
    params = {"type": type, "host": host}
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="delete ntopng device exclusion", description="Remove a device from the MAC tracking exclusion list.")
def delete_device_exclusion(ifid: int, device: str) -> Dict[str, Any]:
    """
    Remove a device from the MAC tracking exclusion list.

    Args:
        ifid (int): Interface identifier.
        device (str): MAC address to remove or 'all' to clear all exclusions.

    Returns:
        Dict[str, Any]: JSON response indicating success or failure.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/delete/device/exclusion.lua"
    params = {"ifid": ifid, "device": device}
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="delete ntopng flow alert exclusions", description="Delete flow alert exclusions for a host.")
def delete_flow_alert_exclusions(alert_addr: str, alert_key: int) -> Dict[str, Any]:
    """
    Delete flow alert exclusions.

    Args:
        alert_addr (str): The host IP address.
        alert_key (int): The flow alert key to exclude.

    Returns:
        Dict[str, Any]: JSON response indicating success or failure.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/delete/flow/alert/exclusions.lua"
    params = {"alert_addr": alert_addr, "alert_key": alert_key}
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="delete ntopng host alert exclusions", description="Delete host alert exclusions for a host.")
def delete_host_alert_exclusions(alert_addr: str, alert_key: int) -> Dict[str, Any]:
    """
    Delete host alert exclusions.

    Args:
        alert_addr (str): The host IP address.
        alert_key (int): The host alert key to exclude.

    Returns:
        Dict[str, Any]: JSON response indicating success or failure.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/delete/host/alert/exclusions.lua"
    params = {"alert_addr": alert_addr, "alert_key": alert_key}
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="delete ntopng snmp device alerts", description="Delete historical SNMP device alerts.")
def delete_snmp_device_alerts(ifid: int, epoch_begin: int, epoch_end: int, alert_id: str, severity: str, 
                             score: str, ip: str, snmp_interface: str) -> Dict[str, Any]:
    """
    Delete SNMP device alerts.

    Args:
        ifid (int): Interface identifier.
        epoch_begin (int): Start time (epoch).
        epoch_end (int): End time (epoch).
        alert_id (str): Alert identifier (e.g., 'id;eq').
        severity (str): Severity identifier (e.g., 'id;eq').
        score (str): Score filter (e.g., 'id;eq').
        ip (str): IP address filter (e.g., 'id;eq').
        snmp_interface (str): SNMP interface identifier (e.g., 'id;eq').

    Returns:
        Dict[str, Any]: JSON response indicating success or failure.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/delete/snmp/device/alerts.lua"
    params = {
        "ifid": ifid,
        "epoch_begin": epoch_begin,
        "epoch_end": epoch_end,
        "alert_id": alert_id,
        "severity": severity,
        "score": score,
        "ip": ip,
        "snmp_interface": snmp_interface
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="edit ntopng device exclusion", description="Edit a device in the MAC tracking exclusion list.")
def edit_device_exclusion(ifid: int, mac: str, mac_alias: str, mac_status: str, trigger_alerts: bool) -> Dict[str, Any]:
    """
    Edit a device in the MAC tracking exclusion list.

    Args:
        ifid (int): Interface identifier.
        mac (str): MAC address to edit.
        mac_alias (str): Alias for the MAC address.
        mac_status (str): MAC address status.
        trigger_alerts (bool): True to trigger alerts, False otherwise.

    Returns:
        Dict[str, Any]: JSON response indicating success or failure.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/edit/device/exclusion.lua"
    params = {
        "ifid": ifid,
        "mac": mac,
        "mac_alias": mac_alias,
        "mac_status": mac_status,
        "trigger_alerts": trigger_alerts
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="get ntopng alert exclusions", description="Retrieve all available alert exclusions.")
def get_alert_exclusions(type: str) -> Dict[str, Any]:
    """
    Get all available alert exclusions.

    Args:
        type (str): Type of host to exclude (e.g., 'host', 'domain', 'certificate').

    Returns:
        Dict[str, Any]: JSON response with alert exclusions.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/alert/exclusion.lua"
    params = {"type": type}
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="get ntopng all alert stats", description="Retrieve statistics for all alerts.")
def get_all_alert_stats(ifid: int, epoch_begin: int, epoch_end: int) -> Dict[str, Any]:
    """
    Get all alert statistics.

    Args:
        ifid (int): Interface identifier.
        epoch_begin (int): Start time (epoch).
        epoch_end (int): End time (epoch).

    Returns:
        Dict[str, Any]: JSON response with alert stats.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/all/alert/top.lua"
    params = {"ifid": ifid, "epoch_begin": epoch_begin, "epoch_end": epoch_end}
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="get ntopng active monitoring alert stats", description="Retrieve alert statistics for active monitoring.")
def get_am_host_alert_stats(ifid: int, epoch_begin: int, epoch_end: int, alert_id: str, severity: str, score: str) -> Dict[str, Any]:
    """
    Get active monitoring alert statistics.

    Args:
        ifid (int): Interface identifier.
        epoch_begin (int): Start time (epoch).
        epoch_end (int): End time (epoch).
        alert_id (str): Alert identifier (e.g., 'id;eq').
        severity (str): Severity identifier (e.g., 'id;eq').
        score (str): Score filter (e.g., 'id;eq').

    Returns:
        Dict[str, Any]: JSON response with active monitoring alert stats.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/am_host/alert/top.lua"
    params = {
        "ifid": ifid,
        "epoch_begin": epoch_begin,
        "epoch_end": epoch_end,
        "alert_id": alert_id,
        "severity": severity,
        "score": score
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="get ntopng excluded devices", description="Retrieve the list of devices excluded from MAC tracking.")
def get_device_exclusions(ifid: int) -> Dict[str, Any]:
    """
    Retrieve the list of excluded devices from MAC tracking.

    Args:
        ifid (int): Interface identifier.

    Returns:
        Dict[str, Any]: JSON response with excluded devices.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/device/exclusion.lua"
    params = {"ifid": ifid}
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="get ntopng domain alert exclusions", description="Retrieve domain alert exclusions.")
def get_domain_alert_exclusions() -> Dict[str, Any]:
    """
    Get domain alert exclusions.

    Returns:
        Dict[str, Any]: JSON response with domain alert exclusions.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/domain/alert/exclusions.lua"
    response = requests.get(url, headers=HEADERS, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="get ntopng flow alert exclusions", description="Retrieve flow alert exclusions for a host.")
def get_flow_alert_exclusions(host: str) -> Dict[str, Any]:
    """
    Get flow alert exclusions.

    Args:
        host (str): The host IP address.

    Returns:
        Dict[str, Any]: JSON response with flow alert exclusions.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/flow/alert/exclusions.lua"
    params = {"host": host}
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="get ntopng flow alert stats", description="Retrieve statistics for flow alerts.")
def get_flow_alert_stats(ifid: int, epoch_begin: int, epoch_end: int, alert_id: str, severity: str, score: str, 
                         ip_version: str, ip: str, cli_ip: str, srv_ip: str, cli_name: str, srv_name: str, 
                         cli_port: str, srv_port: str, vlan_id: str, l7proto: str, cli_country: str, 
                         srv_country: str, probe_ip: str, input_snmp: str, output_snmp: str, snmp_interface: str, 
                         cli_host_pool_id: str, srv_host_pool_id: str, cli_network: str, srv_network: str, 
                         l7_error_id: str, traffic_direction: str, format: str) -> Dict[str, Any]:
    """
    Get flow alert statistics.

    Args:
        ifid (int): Interface identifier.
        epoch_begin (int): Start time (epoch).
        epoch_end (int): End time (epoch).
        alert_id (str): Alert identifier (e.g., 'id;eq').
        severity (str): Severity identifier (e.g., 'id;eq').
        score (str): Score filter (e.g., 'id;eq').
        ip_version (str): IP version filter (e.g., 'id;eq').
        ip (str): IP address filter (e.g., 'id;eq').
        cli_ip (str): Client IP filter (e.g., 'id;eq').
        srv_ip (str): Server IP filter (e.g., 'id;eq').
        cli_name (str): Client hostname filter (e.g., 'id;eq').
        srv_name (str): Server hostname filter (e.g., 'id;eq').
        cli_port (str): Client port filter (e.g., 'id;eq').
        srv_port (str): Server port filter (e.g., 'id;eq').
        vlan_id (str): VLAN ID filter (e.g., 'id;eq').
        l7proto (str): Application protocol filter (e.g., 'id;eq').
        cli_country (str): Client country filter (e.g., 'id;eq').
        srv_country (str): Server country filter (e.g., 'id;eq').
        probe_ip (str): Probe IP filter (e.g., 'id;eq').
        input_snmp (str): Input SNMP interface filter (e.g., 'id;eq').
        output_snmp (str): Output SNMP interface filter (e.g., 'id;eq').
        snmp_interface (str): SNMP interface filter (e.g., 'id;eq').
        cli_host_pool_id (str): Client host pool filter (e.g., 'id;eq').
        srv_host_pool_id (str): Server host pool filter (e.g., 'id;eq').
        cli_network (str): Client network filter (e.g., 'id;eq').
        srv_network (str): Server network filter (e.g., 'id;eq').
        l7_error_id (str): Application layer error filter (e.g., 'id;eq').
        traffic_direction (str): Traffic direction filter (e.g., 'id;eq').
        format (str): Format of return data ('json' or 'txt').

    Returns:
        Dict[str, Any]: JSON response with flow alert stats.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/flow/alert/top.lua"
    params = {
        "ifid": ifid,
        "epoch_begin": epoch_begin,
        "epoch_end": epoch_end,
        "alert_id": alert_id,
        "severity": severity,
        "score": score,
        "ip_version": ip_version,
        "ip": ip,
        "cli_ip": cli_ip,
        "srv_ip": srv_ip,
        "cli_name": cli_name,
        "srv_name": srv_name,
        "cli_port": cli_port,
        "srv_port": srv_port,
        "vlan_id": vlan_id,
        "l7proto": l7proto,
        "cli_country": cli_country,
        "srv_country": srv_country,
        "probe_ip": probe_ip,
        "input_snmp": input_snmp,
        "output_snmp": output_snmp,
        "snmp_interface": snmp_interface,
        "cli_host_pool_id": cli_host_pool_id,
        "srv_host_pool_id": srv_host_pool_id,
        "cli_network": cli_network,
        "srv_network": srv_network,
        "l7_error_id": l7_error_id,
        "traffic_direction": traffic_direction,
        "format": format
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="get ntopng host alert exclusions", description="Retrieve host alert exclusions for a host.")
def get_host_alert_exclusions(host: str) -> Dict[str, Any]:
    """
    Get host alert exclusions.

    Args:
        host (str): The host IP address.

    Returns:
        Dict[str, Any]: JSON response with host alert exclusions.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/host/alert/exclusions.lua"
    params = {"host": host}
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="get ntopng host alert stats", description="Retrieve statistics for host alerts.")
def get_host_alert_stats(ifid: int, epoch_begin: int, epoch_end: int, alert_id: str, severity: str, score: str, 
                         vlan_id: str, ip_version: str, ip: str, name: str, host_pool_id: str, network: str) -> Dict[str, Any]:
    """
    Get host alert statistics.

    Args:
        ifid (int): Interface identifier.
        epoch_begin (int): Start time (epoch).
        epoch_end (int): End time (epoch).
        alert_id (str): Alert identifier (e.g., 'id;eq').
        severity (str): Severity identifier (e.g., 'id;eq').
        score (str): Score filter (e.g., 'id;eq').
        vlan_id (str): VLAN ID filter (e.g., 'id;eq').
        ip_version (str): IP version filter (e.g., 'id;eq').
        ip (str): IP address filter (e.g., 'id;eq').
        name (str): Hostname filter (e.g., 'id;eq').
        host_pool_id (str): Host pool filter (e.g., 'id;eq').
        network (str): Network filter (e.g., 'id;eq').

    Returns:
        Dict[str, Any]: JSON response with host alert stats.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/host/alert/top.lua"
    params = {
        "ifid": ifid,
        "epoch_begin": epoch_begin,
        "epoch_end": epoch_end,
        "alert_id": alert_id,
        "severity": severity,
        "score": score,
        "vlan_id": vlan_id,
        "ip_version": ip_version,
        "ip": ip,
        "name": name,
        "host_pool_id": host_pool_id,
        "network": network
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="get ntopng interface alert stats", description="Retrieve statistics for interface alerts.")
def get_interface_alert_stats(ifid: int, epoch_begin: int, epoch_end: int, alert_id: str, severity: str, 
                              score: str, subtype: str) -> Dict[str, Any]:
    """
    Get interface alert statistics.

    Args:
        ifid (int): Interface identifier.
        epoch_begin (int): Start time (epoch).
        epoch_end (int): End time (epoch).
        alert_id (str): Alert identifier (e.g., 'id;eq').
        severity (str): Severity identifier (e.g., 'id;eq').
        score (str): Score filter (e.g., 'id;eq').
        subtype (str): Alert subtype.

    Returns:
        Dict[str, Any]: JSON response with interface alert stats.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/interface/alert/top.lua"
    params = {
        "ifid": ifid,
        "epoch_begin": epoch_begin,
        "epoch_end": epoch_end,
        "alert_id": alert_id,
        "severity": severity,
        "score": score,
        "subtype": subtype
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="get ntopng mac alert stats", description="Retrieve statistics for MAC alerts.")
def get_mac_alert_stats(ifid: int, epoch_begin: int, epoch_end: int, alert_id: str, severity: str, score: str) -> Dict[str, Any]:
    """
    Get MAC alert statistics.

    Args:
        ifid (int): Interface identifier.
        epoch_begin (int): Start time (epoch).
        epoch_end (int): End time (epoch).
        alert_id (str): Alert identifier (e.g., 'id;eq').
        severity (str): Severity identifier (e.g., 'id;eq').
        score (str): Score filter (e.g., 'id;eq').

    Returns:
        Dict[str, Any]: JSON response with MAC alert stats.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/mac/alert/top.lua"
    params = {
        "ifid": ifid,
        "epoch_begin": epoch_begin,
        "epoch_end": epoch_end,
        "alert_id": alert_id,
        "severity": severity,
        "score": score
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="get ntopng network alert stats", description="Retrieve statistics for network alerts.")
def get_network_alert_stats(ifid: int, epoch_begin: int, epoch_end: int, alert_id: str, severity: str, 
                            score: str, network_name: str) -> Dict[str, Any]:
    """
    Get network alert statistics.

    Args:
        ifid (int): Interface identifier.
        epoch_begin (int): Start time (epoch).
        epoch_end (int): End time (epoch).
        alert_id (str): Alert identifier (e.g., 'id;eq').
        severity (str): Severity identifier (e.g., 'id;eq').
        score (str): Score filter (e.g., 'id;eq').
        network_name (str): Network name filter (e.g., 'id;eq').

    Returns:
        Dict[str, Any]: JSON response with network alert stats.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/network/alert/top.lua"
    params = {
        "ifid": ifid,
        "epoch_begin": epoch_begin,
        "epoch_end": epoch_end,
        "alert_id": alert_id,
        "severity": severity,
        "score": score,
        "network_name": network_name
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="get ntopng observation points stats", description="Retrieve alert statistics for observation points.")
def get_observation_points_stats(ifid: int) -> Dict[str, Any]:
    """
    Get observation points alert statistics.

    Args:
        ifid (int): Interface identifier.

    Returns:
        Dict[str, Any]: JSON response with observation points stats.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/observation_points/stats.lua"
    params = {"ifid": ifid}
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="get ntopng snmp device alert list", description="Retrieve a list of SNMP device alerts.")
def get_snmp_device_alert_list(ifid: int, start: int, length: int, epoch_begin: int, epoch_end: int, 
                               alert_id: str, severity: str, score: str, ip: str, snmp_interface: str, 
                               format: str) -> Dict[str, Any]:
    """
    Get a list of SNMP device alerts.

    Args:
        ifid (int): Interface identifier.
        start (int): Starting record index (e.g., 100 for 101st record).
        length (int): Maximum number of records to retrieve.
        epoch_begin (int): Start time (epoch).
        epoch_end (int): End time (epoch).
        alert_id (str): Alert identifier (e.g., 'id;eq').
        severity (str): Severity identifier (e.g., 'id;eq').
        score (str): Score filter (e.g., 'id;eq').
        ip (str): IP address filter (e.g., 'id;eq').
        snmp_interface (str): SNMP interface filter (e.g., 'id;eq').
        format (str): Format of return data ('json' or 'txt').

    Returns:
        Dict[str, Any]: JSON response with SNMP device alert list.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/snmp/device/alert/list.lua"
    params = {
        "ifid": ifid,
        "start": start,
        "length": length,
        "epoch_begin": epoch_begin,
        "epoch_end": epoch_end,
        "alert_id": alert_id,
        "severity": severity,
        "score": score,
        "ip": ip,
        "snmp_interface": snmp_interface,
        "format": format
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="get ntopng snmp device alert stats", description="Retrieve statistics for SNMP device alerts.")
def get_snmp_device_alert_stats(ifid: int, epoch_begin: int, epoch_end: int, alert_id: str, severity: str, 
                                score: str, ip: str, snmp_interface: str) -> Dict[str, Any]:
    """
    Get SNMP device alert statistics.

    Args:
        ifid (int): Interface identifier.
        epoch_begin (int): Start time (epoch).
        epoch_end (int): End time (epoch).
        alert_id (str): Alert identifier (e.g., 'id;eq').
        severity (str): Severity identifier (e.g., 'id;eq').
        score (str): Score filter (e.g., 'id;eq').
        ip (str): IP address filter (e.g., 'id;eq').
        snmp_interface (str): SNMP interface filter (e.g., 'id;eq').

    Returns:
        Dict[str, Any]: JSON response with SNMP device alert stats.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/snmp/device/alert/top.lua"
    params = {
        "ifid": ifid,
        "epoch_begin": epoch_begin,
        "epoch_end": epoch_end,
        "alert_id": alert_id,
        "severity": severity,
        "score": score,
        "ip": ip,
        "snmp_interface": snmp_interface
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="get ntopng snmp device alert timeseries", description="Retrieve timeseries data for SNMP device alerts.")
def get_snmp_device_alert_timeseries(ifid: int, epoch_begin: int, epoch_end: int, alert_id: str, severity: str, 
                                     score: str, ip: str, snmp_interface: str) -> Dict[str, Any]:
    """
    Get SNMP device alerts timeseries data.

    Args:
        ifid (int): Interface identifier.
        epoch_begin (int): Start time (epoch).
        epoch_end (int): End time (epoch).
        alert_id (str): Alert identifier (e.g., 'id;eq').
        severity (str): Severity identifier (e.g., 'id;eq').
        score (str): Score filter (e.g., 'id;eq').
        ip (str): IP address filter (e.g., 'id;eq').
        snmp_interface (str): SNMP interface filter (e.g., 'id;eq').

    Returns:
        Dict[str, Any]: JSON response with SNMP device alert timeseries.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/snmp/device/alert/ts.lua"
    params = {
        "ifid": ifid,
        "epoch_begin": epoch_begin,
        "epoch_end": epoch_end,
        "alert_id": alert_id,
        "severity": severity,
        "score": score,
        "ip": ip,
        "snmp_interface": snmp_interface
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="get ntopng system alert stats", description="Retrieve statistics for system alerts.")
def get_system_alert_stats(ifid: int, epoch_begin: int, epoch_end: int, alert_id: str, severity: str, score: str) -> Dict[str, Any]:
    """
    Get system alert statistics.

    Args:
        ifid (int): Interface identifier.
        epoch_begin (int): Start time (epoch).
        epoch_end (int): End time (epoch).
        alert_id (str): Alert identifier (e.g., 'id;eq').
        severity (str): Severity identifier (e.g., 'id;eq').
        score (str): Score filter (e.g., 'id;eq').

    Returns:
        Dict[str, Any]: JSON response with system alert stats.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/system/alert/top.lua"
    params = {
        "ifid": ifid,
        "epoch_begin": epoch_begin,
        "epoch_end": epoch_end,
        "alert_id": alert_id,
        "severity": severity,
        "score": score
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="acknowledge ntopng active monitoring alerts", description="Acknowledge historical active monitoring alerts.")
def acknowledge_am_host_alerts(ifid: int, label: str, alert_id: str, row_id: int, epoch_begin: int, epoch_end: int, 
                               severity: str, score: str) -> Dict[str, Any]:
    """
    Acknowledge historical active monitoring alerts.

    Args:
        ifid (int): Interface identifier.
        label (str): Description of why the alert was acknowledged.
        alert_id (str): Alert identifier (e.g., 'id;eq').
        row_id (int): Specific alert identifier.
        epoch_begin (int): Start time (epoch).
        epoch_end (int): End time (epoch).
        severity (str): Severity identifier (e.g., 'id;eq').
        score (str): Score filter (e.g., 'id;eq').

    Returns:
        Dict[str, Any]: JSON response confirming acknowledgment.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/rest/v2/acknowledge/am_host/alerts.lua"
    params = {
        "ifid": ifid,
        "label": label,
        "alert_id": alert_id,
        "row_id": row_id,
        "epoch_begin": epoch_begin,
        "epoch_end": epoch_end,
        "severity": severity,
        "score": score
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="acknowledge ntopng flow alerts", description="Acknowledge historical flow alerts.")
def acknowledge_flow_alerts(ifid: int, label: str, alert_id: str, row_id: int, epoch_begin: int, epoch_end: int, 
                            severity: str, score: str, ip_version: str, ip: str, cli_ip: str, srv_ip: str, 
                            cli_name: str, srv_name: str, cli_port: str, srv_port: str, vlan_id: str, l7proto: str, 
                            cli_country: str, srv_country: str, probe_ip: str, input_snmp: str, output_snmp: str, 
                            snmp_interface: str, cli_host_pool_id: str, srv_host_pool_id: str, cli_network: str, 
                            srv_network: str, l7_error_id: str) -> Dict[str, Any]:
    """
    Acknowledge historical flow alerts.

    Args:
        ifid (int): Interface identifier.
        label (str): Description of why the alert was acknowledged.
        alert_id (str): Alert identifier (e.g., 'id;eq').
        row_id (int): Specific alert identifier.
        epoch_begin (int): Start time (epoch).
        epoch_end (int): End time (epoch).
        severity (str): Severity identifier (e.g., 'id;eq').
        score (str): Score filter (e.g., 'id;eq').
        ip_version (str): IP version filter (e.g., 'id;eq').
        ip (str): IP address filter (e.g., 'id;eq').
        cli_ip (str): Client IP filter (e.g., 'id;eq').
        srv_ip (str): Server IP filter (e.g., 'id;eq').
        cli_name (str): Client hostname filter (e.g., 'id;eq').
        srv_name (str): Server hostname filter (e.g., 'id;eq').
        cli_port (str): Client port filter (e.g., 'id;eq').
        srv_port (str): Server port filter (e.g., 'id;eq').
        vlan_id (str): VLAN ID filter (e.g., 'id;eq').
        l7proto (str): Application protocol filter (e.g., 'id;eq').
        cli_country (str): Client country filter (e.g., 'id;eq').
        srv_country (str): Server country filter (e.g., 'id;eq').
        probe_ip (str): Probe IP filter (e.g., 'id;eq').
        input_snmp (str): Input SNMP interface filter (e.g., 'id;eq').
        output_snmp (str): Output SNMP interface filter (e.g., 'id;eq').
        snmp_interface (str): SNMP interface filter (e.g., 'id;eq').
        cli_host_pool_id (str): Client host pool filter (e.g., 'id;eq').
        srv_host_pool_id (str): Server host pool filter (e.g., 'id;eq').
        cli_network (str): Client network filter (e.g., 'id;eq').
        srv_network (str): Server network filter (e.g., 'id;eq').
        l7_error_id (str): Application layer error filter (e.g., 'id;eq').

    Returns:
        Dict[str, Any]: JSON response confirming acknowledgment.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/rest/v2/acknowledge/flow/alerts.lua"
    params = {
        "ifid": ifid,
        "label": label,
        "alert_id": alert_id,
        "row_id": row_id,
        "epoch_begin": epoch_begin,
        "epoch_end": epoch_end,
        "severity": severity,
        "score": score,
        "ip_version": ip_version,
        "ip": ip,
        "cli_ip": cli_ip,
        "srv_ip": srv_ip,
        "cli_name": cli_name,
        "srv_name": srv_name,
        "cli_port": cli_port,
        "srv_port": srv_port,
        "vlan_id": vlan_id,
        "l7proto": l7proto,
        "cli_country": cli_country,
        "srv_country": srv_country,
        "probe_ip": probe_ip,
        "input_snmp": input_snmp,
        "output_snmp": output_snmp,
        "snmp_interface": snmp_interface,
        "cli_host_pool_id": cli_host_pool_id,
        "srv_host_pool_id": srv_host_pool_id,
        "cli_network": cli_network,
        "srv_network": srv_network,
        "l7_error_id": l7_error_id
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="delete ntopng new devices", description="Delete all new devices learned by ntopng.")
def delete_new_devices() -> Dict[str, Any]:
    """
    Delete all new devices learned by ntopng.

    Returns:
        Dict[str, Any]: JSON response indicating success or failure.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/rest/v2/delete/host/new_devices.lua"
    response = requests.get(url, headers=HEADERS, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="delete ntopng interface alerts", description="Delete historical interface alerts.")
def delete_interface_alerts(ifid: int, epoch_begin: int, epoch_end: int, alert_id: str, severity: str, 
                            score: str, subtype: str) -> Dict[str, Any]:
    """
    Delete historical interface alerts.

    Args:
        ifid (int): Interface identifier.
        epoch_begin (int): Start time (epoch).
        epoch_end (int): End time (epoch).
        alert_id (str): Alert identifier (e.g., 'id;eq').
        severity (str): Severity identifier (e.g., 'id;eq').
        score (str): Score filter (e.g., 'id;eq').
        subtype (str): Alert subtype.

    Returns:
        Dict[str, Any]: JSON response indicating success or failure.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/rest/v2/delete/interface/alerts.lua"
    params = {
        "ifid": ifid,
        "epoch_begin": epoch_begin,
        "epoch_end": epoch_end,
        "alert_id": alert_id,
        "severity": severity,
        "score": score,
        "subtype": subtype
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="delete ntopng mac alerts", description="Delete historical MAC alerts.")
def delete_mac_alerts(ifid: int, epoch_begin: int, epoch_end: int, alert_id: str, severity: str, score: str) -> Dict[str, Any]:
    """
    Delete historical MAC alerts.

    Args:
        ifid (int): Interface identifier.
        epoch_begin (int): Start time (epoch).
        epoch_end (int): End time (epoch).
        alert_id (str): Alert identifier (e.g., 'id;eq').
        severity (str): Severity identifier (e.g., 'id;eq').
        score (str): Score filter (e.g., 'id;eq').

    Returns:
        Dict[str, Any]: JSON response indicating success or failure.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/rest/v2/delete/mac/alerts.lua"
    params = {
        "ifid": ifid,
        "epoch_begin": epoch_begin,
        "epoch_end": epoch_end,
        "alert_id": alert_id,
        "severity": severity,
        "score": score
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="delete ntopng network alerts", description="Delete historical network alerts.")
def delete_network_alerts(ifid: int, epoch_begin: int, epoch_end: int, alert_id: str, severity: str, 
                          score: str, network_name: str) -> Dict[str, Any]:
    """
    Delete historical network alerts.

    Args:
        ifid (int): Interface identifier.
        epoch_begin (int): Start time (epoch).
        epoch_end (int): End time (epoch).
        alert_id (str): Alert identifier (e.g., 'id;eq').
        severity (str): Severity identifier (e.g., 'id;eq').
        score (str): Score filter (e.g., 'id;eq').
        network_name (str): Network name filter (e.g., 'id;eq').

    Returns:
        Dict[str, Any]: JSON response indicating success or failure.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/rest/v2/delete/network/alerts.lua"
    params = {
        "ifid": ifid,
        "epoch_begin": epoch_begin,
        "epoch_end": epoch_end,
        "alert_id": alert_id,
        "severity": severity,
        "score": score,
        "network_name": network_name
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="delete ntopng system alerts", description="Delete historical system alerts.")
def delete_system_alerts(ifid: int, epoch_begin: int, epoch_end: int, alert_id: str, severity: str, score: str) -> Dict[str, Any]:
    """
    Delete historical system alerts.

    Args:
        ifid (int): Interface identifier.
        epoch_begin (int): Start time (epoch).
        epoch_end (int): End time (epoch).
        alert_id (str): Alert identifier (e.g., 'id;eq').
        severity (str): Severity identifier (e.g., 'id;eq').
        score (str): Score filter (e.g., 'id;eq').

    Returns:
        Dict[str, Any]: JSON response indicating success or failure.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/rest/v2/delete/system/alerts.lua"
    params = {
        "ifid": ifid,
        "epoch_begin": epoch_begin,
        "epoch_end": epoch_end,
        "alert_id": alert_id,
        "severity": severity,
        "score": score
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

# --- Flows Section ---
@mcp.tool(name="get ntopng clickhouse columns", description="Retrieve all available columns in the ntopng Clickhouse database.")
def get_db_columns_info() -> Dict[str, Any]:
    """
    Retrieve all available columns in the Clickhouse flows database.

    Returns:
        Dict[str, Any]: JSON response with column information.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/db/columns_info.lua"
    response = requests.get(url, headers=HEADERS, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="query ntopng flows data", description="Retrieve detailed flows data from the ntopng flows database.")
def get_flows_data(ifid: int, begin_time_clause: int, end_time_clause: int, select_clause: str = "*", 
                   where_clause: str = "", maxhits_clause: int = 10, order_by_clause: str = "", 
                   group_by_clause: str = "") -> Dict[str, Any]:
    """
    Retrieve flows data from the database.

    Args:
        ifid (int): Interface identifier.
        begin_time_clause (int): Start time in epoch format.
        end_time_clause (int): End time in epoch format.
        select_clause (str, optional): SQL SELECT clause (default: "*").
        where_clause (str, optional): SQL WHERE clause (default: none).
        maxhits_clause (int, optional): Maximum number of hits (default: 10).
        order_by_clause (str, optional): SQL ORDER BY clause (default: none).
        group_by_clause (str, optional): SQL GROUP BY clause (default: none).

    Returns:
        Dict[str, Any]: JSON response with flows data.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/db/flows.lua"
    params = {
        "ifid": ifid,
        "begin_time_clause": begin_time_clause,
        "end_time_clause": end_time_clause,
        "select_clause": select_clause,
        "where_clause": where_clause,
        "maxhits_clause": maxhits_clause,
        "order_by_clause": order_by_clause,
        "group_by_clause": group_by_clause
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

@mcp.tool(name="get ntopng top-k flows", description="Retrieve top-k flows data from the ntopng flows database.")
def get_topk_flows(ifid: int, begin_time_clause: int, end_time_clause: int, select_keys_clause: str = "IPV4_SRC_ADDR,IPV4_DST_ADDR,L7_PROTO", 
                   select_values_clause: str = "BYTES", where_clause: str = "", topk_clause: str = "SUM", 
                   approx_search: str = "true", maxhits_clause: int = 10) -> Dict[str, Any]:
    """
    Retrieve top-k flows data from the database.

    Args:
        ifid (int): Interface identifier.
        begin_time_clause (int): Start time (epoch).
        end_time_clause (int): End time (epoch).
        select_keys_clause (str, optional): Comma-separated keys list (default: 'IPV4_SRC_ADDR,IPV4_DST_ADDR,L7_PROTO').
        select_values_clause (str, optional): Select value (default: 'BYTES').
        where_clause (str, optional): SQL WHERE clause (default: none).
        topk_clause (str, optional): Top-K clause (default: 'SUM').
        approx_search (str, optional): Approximate search (default: 'true').
        maxhits_clause (int, optional): Maximum number of hits (default: 10).

    Returns:
        Dict[str, Any]: JSON response with top-k flows data.

    Raises:
        requests.RequestException: If the request fails.
    """
    url = f"{BASE_URL}/lua/pro/rest/v2/get/db/topk_flows.lua"
    params = {
        "ifid": ifid,
        "begin_time_clause": begin_time_clause,
        "end_time_clause": end_time_clause,
        "select_keys_clause": select_keys_clause,
        "select_values_clause": select_values_clause,
        "where_clause": where_clause,
        "topk_clause": topk_clause,
        "approx_search": approx_search,
        "maxhits_clause": maxhits_clause
    }
    response = requests.get(url, headers=HEADERS, params=params, verify=True)
    response.raise_for_status()
    return response.json()

# Example usage
if __name__ == "__main__":
    try:
        # Example call to get top local talkers
        result = get_top_local_talkers(ifid=1)
        print(result)
        
        # Example call to add a host to vulnerability scan
        scan_result = add_host_to_scan(
            host="192.168.1.100",
            scan_type="nmap",
            scan_ports="80,443",
            scan_frequency="1day",
            scan_id="scan_001",
            cidr="24"
        )
        print(scan_result)
    except requests.RequestException as e:
        print(f"API request failed: {e}")
```

### Coverage
This code includes all methods from the specified sections:

1. **Hosts (1.4.2)**:
   - `GET /lua/pro/rest/v2/get/geo_map/hosts.lua`
   - `GET /lua/pro/rest/v2/get/interface/top/local/talkers.lua`
   - `GET /lua/pro/rest/v2/get/interface/top/remote/talkers.lua`
   - `GET /lua/pro/rest/v2/get/interface/top_ts_stats.lua`
   - `POST /lua/rest/v2/add/host/to_scan.lua`
   - `POST /lua/rest/v2/exec/host/schedule_vulnerability_scan.lua`

2. **Alerts (1.4.3)**:
   - `GET /lua/pro/rest/v2/acknowledge/snmp/device/alerts.lua`
   - `GET /lua/pro/rest/v2/add/alert/exclusion.lua`
   - `GET /lua/pro/rest/v2/add/device/exclusion.lua`
   - `GET /lua/pro/rest/v2/delete/alert/exclusion.lua`
   - `GET /lua/pro/rest/v2/delete/all/alert/exclusions.lua`
   - `GET /lua/pro/rest/v2/delete/device/exclusion.lua`
   - `GET /lua/pro/rest/v2/delete/flow/alert/exclusions.lua`
   - `GET /lua/pro/rest/v2/delete/host/alert/exclusions.lua`
   - `GET /lua/pro/rest/v2/delete/snmp/device/alerts.lua`
   - `GET /lua/pro/rest/v2/edit/device/exclusion.lua`
   - `GET /lua/pro/rest/v2/get/alert/exclusion.lua`
   - `GET /lua/pro/rest/v2/get/all/alert/top.lua`
   - `GET /lua/pro/rest/v2/get/am_host/alert/top.lua`
   - `GET /lua/pro/rest/v2/get/device/exclusion.lua`
   - `GET /lua/pro/rest/v2/get/domain/alert/exclusions.lua`
   - `GET /lua/pro/rest/v2/get/flow/alert/exclusions.lua`
   - `GET /lua/pro/rest/v2/get/flow/alert/top.lua`
   - `GET /lua/pro/rest/v2/get/host/alert/exclusions.lua`
   - `GET /lua/pro/rest/v2/get/host/alert/top.lua`
   - `GET /lua/pro/rest/v2/get/interface/alert/top.lua`
   - `GET /lua/pro/rest/v2/get/mac/alert/top.lua`
   - `GET /lua/pro/rest/v2/get/network/alert/top.lua`
   - `GET /lua/pro/rest/v2/get/observation_points/stats.lua`
   - `GET /lua/pro/rest/v2/get/snmp/device/alert/list.lua`
   - `GET /lua/pro/rest/v2/get/snmp/device/alert/top.lua`
   - `GET /lua/pro/rest/v2/get/snmp/device/alert/ts.lua`
   - `GET /lua/pro/rest/v2/get/system/alert/top.lua`
   - `GET /lua/rest/v2/acknowledge/am_host/alerts.lua`
   - `GET /lua/rest/v2/acknowledge/flow/alerts.lua`
   - `GET /lua/rest/v2/delete/host/new_devices.lua`
   - `GET /lua/rest/v2/delete/interface/alerts.lua`
   - `GET /lua/rest/v2/delete/mac/alerts.lua`
   - `GET /lua/rest/v2/delete/network/alerts.lua`
   - `GET /lua/rest/v2/delete/system/alerts.lua`
   - (Note: Excluded `GET /lua/pro/rest/v2/get/user/alert/top.lua` and `GET /lua/rest/v2/delete/user/alerts.lua` as they relate to Users)

3. **Flows (1.4.4)**:
   - `GET /lua/pro/rest/v2/get/db/columns_info.lua`
   - `GET /lua/pro/rest/v2/get/db/flows.lua`
   - `GET /lua/pro/rest/v2/get/db/topk_flows.lua`

### Notes
- **Environment Variables**: Ensure `NTOPNG_HOST` and `NTOPNG_API_KEY` are set in your environment.
- **Decorator**: The `@mcp.tool` is mocked; adjust it if your actual implementation differs.
- **Parameter Handling**: All parameters are included as per the spec, with optional ones given defaults where applicable.
- **Completeness**: This covers all methods in the Hosts, Alerts, and Flows sections, excluding Users-related endpoints from Alerts.

Let me know if you need further refinements or additional sections!