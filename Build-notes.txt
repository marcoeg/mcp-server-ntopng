‚óè To build and use your package with uv:

  1. Build your package:
  uv pip install build
  python -m build

  2. Install locally with uv:
  uv pip install dist/mcp_ntopng-0.1.0-py3-none-any.whl

  3. Configure Claude Desktop:
    - Edit your configuration file:
        - MacOS: ~/Library/Application Support/Claude/claude_desktop_config.json
      - Windows: %APPDATA%/Claude/claude_desktop_config.json
  4. Add this configuration:
  {
    "mcpServers": {
      "ntopng": {
        "command": "uv",
        "args": ["run", "mcp-ntopng"],
        "env": {
          "NTOPNG_HOST": "<ntopng-host>",
          "NTOPNG_DBPORT": "<ntopng-dbport>",
          "NTOPNG_DBUSER": "<ntopng-dbuser>",
          "NTOPNG_DBPASSWORD": "<ntopng-dbpassword>",
          "NTOPNG_SECURE": "true",
          "NTOPNG_VERIFY": "true",
          "NTOPNG_CONNECT_TIMEOUT": "30",
          "NTOPNG_SEND_RECEIVE_TIMEOUT": "300",
          "NTOPNG_API_KEY": "your-ntopng-token"
        }
      }
    }
  }

  This configuration uses uv run to execute your package script. After restarting Claude Desktop, it should be able to use your ntopng MCP
  server.


==============================================

‚óè Plan for publishing mcp-ntopng as a package on PyPI:

Publishing your MCP Server package (`mcp-ntopng`) to **PyPI** is a great next step! You‚Äôll be able to:

- `pip install mcp-ntopng`
- Run it with `mcp-ntopng` directly from any terminal
- Use it in Claude Desktop via a simple path to the installed script

> Make sure to bump the release version to update an existing package.

---

## ‚úÖ Step-by-Step: Publish to PyPI

### 1. ‚úÖ Clean up `pyproject.toml`

Make sure it includes the essentials:

```toml
[project]
name = "mcp-ntopng"                     # Must match the name you'll use on PyPI
version = "0.1.0"
description = "MCP server for ntopng integration"
authors = [{ name = "Your Name", email = "you@example.com" }]
license = "MIT"
readme = "README.md"
requires-python = ">=3.8"

dependencies = [
  "clickhouse-driver>=0.2.5",
  "mcp[cli]>=1.3.0",
  "requests>=2.32.3",
  "python-dotenv>=1.0.1",
  "pip-system-certs>=4.0"
]

[project.scripts]
mcp-ntopng = "mcp_ntopng.main:main"     # üëà this makes the CLI available

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
```

---

### 2. ‚úÖ Register on PyPI

- Go to: https://pypi.org/account/register/
- Create an account if you haven‚Äôt already
- Save your **username** and **password / token**

---

### 3. ‚úÖ Build the package

```bash
uv build
```

(or use `python -m build` if using standard tooling)

---

### 4. ‚úÖ Upload to PyPI

First, install Twine:

```bash
uv pip install twine
```

Then upload:

```bash
twine upload dist/*
```

It will prompt for your username and password/token.

> üîê You can also use an [API token](https://pypi.org/help/#apitoken) instead of password for more security.

---

### 5. ‚úÖ Test the package

From a clean environment or container:

```bash
pip install mcp-ntopng
mcp-ntopng  # üéâ should just work!
```

---

## üõ† Bonus: Private PyPI or GitHub Releases?

If you don‚Äôt want to publish publicly:
- Use a **private PyPI index** (e.g. Artifactory, Cloudsmith)
- Or publish the `.whl` as a **GitHub Release** and let users `pip install` from a GitHub URL:
  ```bash
  pip install https://github.com/your-org/mcp-ntopng/releases/download/v0.1.0/mcp_ntopng-0.1.0-py3-none-any.whl
  ```

------------------------------------------------------------------------
